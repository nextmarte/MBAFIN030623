---
title: "Finan√ßas com R"
author: "Marcus Antonio Cardoso Ramalho"
format: revealjs
incremental: true
footer: "UFF 2023 - MBA EM FINAN√áAS CORPORATIVAS E MERCADO DE CAPITAIS"
logo: "https://ppgad.uff.br/wp-content/uploads/sites/96/2022/08/ppgad-logo.jpg"
---

# Marcus Ramalho

-   10 anos pra aprender a programar ü§¶‚Äç
-   Matlab/Fortran/Pascal/VBA/AutoLISP(LISP)/PHP/HTML/\
    M(power query)/TypeScript/Python/R‚ù§Ô∏èe SQL
-   Administra√ß√£o UFF
-   Mestrando PPGAd-UFF
-   Pesquiso FII's/PKM/Web3.0 com ci√™ncia de dados

# Nossa jornada hoje:

::: columns
::: {.column width="50%"}
-   Introdu√ß√£o ao R
-   Ferramentas
-   RStudio
-   Configurando o RStudio Cloud
-   Interface
-   Tipos de documento
-   Objetos
-   Operadores e opera√ß√µes
:::

::: {.column width="50%"}
-   Pacotes
-   Importando e exportando dados
-   tidyverse
-   quantmode e yahoo finance
-   PerformanceAnalytics
-   Visualiza√ß√£o de dados
-   Trabalhando com uma carteira de investimento
:::
:::

# A linguagem de programa√ß√£o R {background-image="https://www.codecademy.com/resources/blog/wp-content/uploads/2022/12/what-is-r-programming-language-used-for.png" background-opacity="15%" style="font-size: 25px"}

::: columns
::: {.column width="50%" style="font-size: 25px"}
![](https://uploads.cosx.org/2012/05/Ihaka-Gentleman.jpg)

-   Criada por Ross Ihaka e Robert Gentleman na Universidade de Auckland, Nova Zel√¢ndia, em 1993
-   Desenvolvida como uma implementa√ß√£o da linguagem S, voltada para an√°lise estat√≠stica
-   Projetada para ser uma linguagem de programa√ß√£o livre, de c√≥digo aberto e multiplataforma
:::

::: {.column width="50%" style="font-size: 25px"}
-   **Por que usar R?**

-   Ampla ado√ß√£o em comunidades acad√™micas e industriais

-   Funcionalidades estat√≠sticas e de an√°lise de dados

-   Grande variedade de pacotes e bibliotecas dispon√≠veis no CRAN e no Github

-   Visualiza√ß√£o de dados simples e flex√≠vel

-   Reprodutibilidade
:::
:::

# Mas quem usa R? {style="font-size:25px"}

-   Universidades usam para pesquisa cient√≠fica

    ![](https://media.tenor.com/9ItR8nSuxE0AAAAC/thumbs-up-computer.gif){width="20%"}

-   Google: utiliza R para an√°lise de dados e personaliza√ß√£o de an√∫ncios

    ![](https://media.tenor.com/DJUPce9V1WMAAAAC/google-logo.gif){width="20%"}

-   Facebook: utiliza R para an√°lise de dados de usu√°rios e an√°lise de experimentos

    ![](https://media.tenor.com/O_Xz04m4F4AAAAAd/mark-zuckerberg-facebook.gif){width="15%"}

# Ferramentas {style="font-size: 25px"}

::: panel-tabset
## Rstudio

√â o ambiente mais usado pela comunidade

![](https://www.rstudio.com/assets/img/og/rstudio-og-fb-1.jpg){width="80%"}

## RStudio Cloud

![](https://www.softcrylic.com/wp-content/uploads/2019/05/rstudio-cloud-the-perfect-environment-to-teach-r-programming-language-featured-img.jpg){width="80%"}

## VSCode

![](https://i.pinimg.com/originals/69/b1/38/69b1383bea713ea5648cb007e15a35b7.png){width="80%"}
:::

# RStudio, seu melhor amigo {style="font-size:20px"}

-   Interface amig√°vel

    ![](https://media.tenor.com/yiVNLvmXTb0AAAAj/1979-joe-leads-efforts.gif){width="10%"}

-   Voc√™ n√£o precisa ser programador pra usar

    ![](https://media.tenor.com/lNtmoshuUI8AAAAi/bahroo-hacker.gif){width="10%"}

-   Ele te da dicas e te ajuda a encontrar erros

    ![](https://media.tenor.com/zjMfbvji8FAAAAAi/%25E5%258A%25A9%25E3%2581%2591%25E3%2581%25A6-%25E3%2583%2598%25E3%2583%25AB%25E3%2583%2597.gif){width="10%"}

-   Ele te faz passar raiva, mas geralmente o problema est√° entre a cadeira e o PC

    ![](https://media.tenor.com/iHgOa-519TkAAAAM/angry-angry-panda.gif)

# Baixando o Rstudio - posit.co/download {style="font-size:15px"}

<div>

<iframe src="https://posit.co/download/" width="1900" height="550">

</iframe>

</div>

# Configurando o RStudio Cloud {style="font-size:15px"}

-   Crie uma conta na posit cloud : [posit.cloud](https://posit.cloud/login?code=pRbFSqzFHAiBuJeAOFPm9qEFiIbKzT) ‚òÅÔ∏è

-   Crie um projeto

![](https://i.pinimg.com/originals/64/b5/85/64b5854a0264f215c7e425fd954ab98a.png){width="60%"}

# Vamos explorar o RStudio {style="font-size:25px"}

-   Elementos da interface

-   Tipos de documentos: r script; MD; RMD; QMD

![](https://media.tenor.com/7F2M-UN_d0sAAAAC/swinging-by-im-here.gif)

# Objetos {style="font-size:25px"}

-   Os objetos s√£o elementos fundamentais para armazenar e manipular dados.

-   Eles podem conter diferentes tipos de informa√ß√µes, como n√∫meros, textos, vetores, matrizes, data frames, entre outros.

![](https://media.tenor.com/Jm6tMdRfgooAAAAi/%25E6%2583%258A%25E5%2596%259C%25E5%259C%25A8%25E9%2587%258C%25E9%259D%25A2-%25E7%25A4%25BC%25E7%2589%25A9.gif)

::: callout-note
## Aten√ß√£o!!

N√£o confunda Objeto com vari√°vel, ela representa atrav√©s de um nome um valor armazenado em uma unidade de mem√≥ria do computador. Usamos ela para acessar o conte√∫do dos nossos objetos.
:::

# Operadores {style="font-size:25px"}

**S√£o eles que permitem realizar opera√ß√µes l√≥gicas, aritim√©ticas e de atribui√ß√£o**

\huge

```{r}
#| echo: true
#| message: false
#| eval: false


# Operadores Aritm√©ticos
x <- 10 + 5 - 2
y <- 3 * x

# Operadores de Compara√ß√£o
z <- x > y
z <- x < y

# Operadores L√≥gicos
resultado <- (x > 5) & (y < 10)
resultado <- (x > 5) | (y < 10)

# Operadores de Atribui√ß√£o
nome <- "Jo√£o"
nome="Jo√£o"
nome=="Jo√£o"

# Operadores de Indexa√ß√£o
vetor <- c(1, 2, 3)
elemento <- vetor[2]



```

\normalsize

# Vari√°veis

```{r}
# Vari√°vel num√©rica
num <- 10
print(class(num))  # Imprime "numeric"

# Vari√°vel de caractere (string)
char <- "Hello, world!"
print(class(char))  # Imprime "character"

# Vetor num√©rico
vetor_num <- c(1, 2, 3, 4, 5)
print(class(vetor_num))  # Imprime "numeric"

# Vetor de caracteres
vetor_char <- c("ma√ß√£", "banana", "laranja")
print(class(vetor_char))  # Imprime "character"

# Fator (vari√°vel categ√≥rica)
fator <- factor(c("sim", "n√£o", "sim", "sim"))
print(class(fator))  # Imprime "factor"

# Lista
lista <- list(nome = "Jo√£o", idade = 30, cidade = "S√£o Paulo")
print(class(lista))  # Imprime "list"

# Matriz
matriz <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)
print(class(matriz))  # Imprime "matrix"

# Data frame
data_frame <- data.frame(nome = c("Jo√£o", "Maria"), idade = c(30, 25))
print(class(data_frame))  # Imprime "data.frame"

# Vetor l√≥gico (booleano)
vetor_logico <- c(TRUE, FALSE, TRUE)
print(class(vetor_logico))  # Imprime "logical"

# Data (tipo de data/hora)
data_hora <- Sys.time()
print(class(data_hora))  # Imprime "POSIXct" ou "POSIXt"

```

# Pacotes

::: columns
::: {.column width="50%" style="font-size: 25px"}
![](https://media.tenor.com/fZ61hTnPKMYAAAAC/love-love-pack.gif)
:::

::: {.column width="50%" style="font-size: 25px"}
-   Os pacotes s√£o bibliotecas de c√≥digo escritas por desenvolvedores e comunidade do R.
-   Fornecem recursos adicionais que expandem as capacidades do R.
-   Permitem realizar an√°lises estat√≠sticas, visualiza√ß√µes de dados, aprendizado de m√°quina e muito mais.
:::
:::

# Por que usar pacotes? {style="font-size:25px"}

::: columns
::: {.column width="50%" style="font-size: 25px"}
-   Os pacotes oferecem funcionalidades especializadas, otimizadas e testadas para tarefas espec√≠ficas.
-   Permitem economizar tempo e esfor√ßo, aproveitando c√≥digos e algoritmos j√° implementados.
-   A comunidade do R contribui com uma ampla variedade de pacotes, garantindo op√ß√µes para diferentes √°reas de aplica√ß√£o.
:::

::: {.column width="50%" style="font-size: 25px"}
![](https://media.tenor.com/8rDz-phclxUAAAAC/eu-quero.gif){width="80%"}
:::
:::

# Como usar? {style="font-size:25px"}

Voc√™ pode instalar e carregar pela interface ou...

```{r}
#| eval: false
#| echo: true
# Instala√ß√£o de um pacote
install.packages("ggplot2")

# Carregamento de um pacote
library(ggplot2)

# Utiliza√ß√£o de uma fun√ß√£o do pacote
ggplot2::qplot(x, y, data = df)

```

# Importando dados {style="font-size:25px"}

√â poss√≠vel importar arquivos usando a interface ou comandos usando alguns pacotes

```{r}
#| eval: false
#| echo: true


library(readr)
dados_csv <- read_csv("dados.csv")

library(readxl)
dados_excel <- read_excel("dados.xlsx")

library(rio)
import("dados.xlsx")

library(httr)
resposta <- GET("https://api.exemplo.com/dados")
dados_api <- content(resposta, "parsed")
```

# Tidyverse {style="font-size:25px"}

√â um conjunto de pacotes do R projetados para facilitar a manipula√ß√£o, visualiza√ß√£o e an√°lise de dados.

![](https://rviews.rstudio.com/post/2017-06-09-What-is-the-tidyverse_files/tidyverse1.png)

# Filosofia {style="font-size:25px"}

-   "Dados desarrumados" (messy data) s√£o dif√≠ceis de trabalhar.

-   O tidyverse segue o princ√≠pio de "dados arrumados" (tidy data), que s√£o estruturados de maneira consistente e organizada, isso permite trabalhar de forma program√°tica com os pacotes do tidyverse.

    ![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png)

-   Cada vari√°vel deve ter sua pr√≥pria coluna

-   Cada observa√ß√£o deve ter sua pr√≥rpia linha

-   Cada valor deve ter sua pr√≥pria c√©lula

# Exemplo de aplica√ß√£o do tidyverse {style="font-size:20px"}

\huge

```{r}
#| echo: true


library(tidyverse)

# Carregar o conjunto de dados "mpg"
data(mpg)

# Manipula√ß√£o de dados usando dplyr
dados_filtrados <- mpg %>%
  filter(cyl == 4 & drv == "f") %>%
  select(manufacturer, model, hwy)

# Visualiza√ß√£o usando ggplot2
ggplot(dados_filtrados, aes(x = manufacturer, y = hwy)) +
  geom_point() +
  labs(x = "Fabricante", y = "Consumo de combust√≠vel (mpg)")

```

\normalsize

# Dados de pre√ßo de ativos usando o pacote quantmode {style="font-size:20px"}

::: columns
::: {.column width="50%" style="font-size: 20px"}
**Yahoo Finance:**

-   Uma das principais fontes de dados financeiros online.
-   Oferece uma ampla cobertura de a√ß√µes, √≠ndices, moedas e dados financeiros de empresas.
-   O pacote quantmod utiliza a API(Interface de Programa√ß√£o de Aplica√ß√£o)do Yahoo Finance para acessar esses dados.

**quantmod:**

-   Pacote do R para an√°lise financeira.
-   Funcionalidades para obter series hist√≥ricas de pre√ßo de ativos financeiros.
-   Amplamente utilizado por traders, analistas e pesquisadores financeiros.
:::

::: {.column width="50%" style="font-size: 20px"}
```{r}
#| echo: true
#| message: false

library(quantmod)

ticker <- "^BVSP"
getSymbols(ticker, src = "yahoo")
(dados_precos <- BVSP$BVSP.Close)

```
:::
:::

# Performance analytics {style="font-size:20px"}

::: columns
::: {.column width="50%" style="font-size: 20px"}
-   O pacote PerformanceAnalytics no R √© uma ferramenta para an√°lise de desempenho de investimentos e medidas de risco.
-   Vamos usar em conjunto com o quantmode para obter um grafico de retornos de um ativo por exemplo
:::

::: {.column width="50%" style="font-size: 20px"}
```{r}
#| echo: true
#| message: false

library(PerformanceAnalytics)

# Baixando dados de pre√ßos hist√≥ricos
getSymbols("^BVSP",
           from = "2023-04-30",
             to = "2023-06-02")

# Calculando retornos di√°rios
retornos <- Return.calculate(Cl(BVSP))

# Calculando retorno anualizado
retorno_anualizado <- Return.annualized(retornos, scale = 252)

# Criando gr√°fico de retornos
plot(retornos, main = "Gr√°fico de Retornos")

```
:::
:::

# Podemos melhorar aquele gr√°fico {style="font-size:20px"}

::: panel-tabset
## Est√°tico ou...

```{r}
#| echo: true
#| message: false

retornos <- timetk::tk_tbl(retornos, rename_index ="Date") %>%
  drop_na()

g1 <- ggplot(data = retornos, aes(x = Date, y = BVSP.Close)) +
  geom_line(color = "blue") +
  labs(title = "Gr√°fico de Retornos", x = "Data", y = "Retornos") +
  theme_minimal()
g1
```

## Interativo

```{r}
#| echo: true
#| message: false
plotly::ggplotly(g1)
```
:::

# Trabalhando com um portif√≥lio ou carteira {style="font-size:20px"}

-   Criar um novo projeto no RStudio cloud (ou posit cloud)
-   Criar um portif√≥lio com 5 ativos ou mais (consultar no yahoo finance)
-   Baixar os dados de pre√ßo
-   Visualizar o gr√°fico de pre√ßos mensais dos ativos
-   Calcular e visualizar os retornos mensais
-   Explorar outras fun√ß√µes (se der tempo)
